type Account = record { owner: principal; subaccount: opt vec nat8 };
type InitArgs = record {
    fee: nat;
    minting_account: opt Account;
    name: text;
    primary_account: opt Account;
    transaction_window_nanos: nat64;
    permitted_drift_nanos: nat64;
    decimal: nat8;
    symbol: text;
};
type State = record {
    fee: nat;
    decimals: nat8;
    metadata: vec record { text; Value };
    minting_account: opt Account;
    name: text;
    primary_account: opt Account;
    transaction_window_nanos: nat64;
    transactions: vec Transaction;
    permitted_drift_nanos: nat64;
    supported_standards: vec SupportedStandard;
    total_supply: nat;
    symbol: text;
};
type SupportedStandard = record { url: text; name: text };
type Transaction = record {
    fee: nat;
    args: _InlineTransactionArgs;
    from: opt Account;
    kind: TransactionKind;
    timestamp: nat64;
};
type TransactionKind = variant { Approve; Burn; Mint; Transfer; TransferFrom };
type TransferArgs = record {
    to: Account;
    fee: opt nat;
    memo: opt vec nat8;
    from_subaccount: opt vec nat8;
    created_at_time: opt nat64;
    amount: nat;
};
type TransferError = variant {
    GenericError: _InlineTransferErrorGenericError;
    TemporarilyUnavailable;
    BadBurn: _InlineTransferErrorBadBurn;
    Duplicate: _InlineTransferErrorDuplicate;
    BadFee: _InlineTransferErrorBadFee;
    CreatedInFuture: _InlineTransferErrorCreatedInFuture;
    TooOld;
    InsufficientFunds: _InlineTransferErrorInsufficientFunds;
};
type Value = variant { Int: int; Nat: nat; Blob: vec nat8; Text: text };
type _AzleResult = variant { Ok: nat; Err: TransferError };
service : (InitArgs) -> {
    getCurrentState: () -> (State) query;
    icrc1_balance_of: (Account) -> (nat) query;
    icrc1_decimals: () -> (nat8) query;
    icrc1_fee: () -> (nat) query;
    icrc1_metadata: () -> (vec record { text; Value }) query;
    icrc1_minting_account: () -> (opt Account) query;
    icrc1_name: () -> (text) query;
    icrc1_supported_standards: () -> (vec SupportedStandard) query;
    icrc1_symbol: () -> (text) query;
    icrc1_total_supply: () -> (nat) query;
    icrc1_transfer: (TransferArgs) -> (_AzleResult);
    mint: (Account, nat) -> (text);
    updateMinterAccount: (principal) -> (text);
    updatePrimaryAccount: (principal) -> (text);
}
